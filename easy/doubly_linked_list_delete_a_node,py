"""
  Given a doubly Linked list and a position. The task is to delete a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list.

Examples:

Input: LinkedList = 1 <--> 3 <--> 4, x = 3
Output: 1 3  
Explanation: 
After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 <--> 3.
 
Input: LinkedList = 1 <--> 5 <--> 2 <--> 9, x = 1
Output: 5 2 9
Explanation:

Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

Constraints:
2 <= size of the linked list(n) <= 105
1 <= x <= n
1 <= node.data <= 109
"""
class Solution:
    def delete_node(self, head, x):
        #code here
        del_node = head
        x = x - 1
        while x > 0:
            del_node = del_node.next
            x = x - 1
        if head is None or del_node is None:
            return None
        if head == del_node:
            head = del_node.next
        if del_node.prev is not None:
            del_node.prev.next = del_node.next
        
        return head
